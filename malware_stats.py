#!/usr/bin/env python

import imaplib
import email
import hashlib
import base64
import requests
import json
import datetime

from tqdm import tqdm
from email import message
from datetime import datetime

__author__ = "Corsin Camichel"
__copyright__ = "Copyright 2020, Corsin Camichel"
__license__ = "Creative Commons Attribution-ShareAlike 4.0 International License."
__version__ = "1.3"
__email__ = "cocaman@gmail.com"

# IMAP settings
SERVER=""       # mail.DOMAIN.ch
USERNAME=""     # user@DOMAIN.ch
PASSWORD=""     # VelvetSweatshop
FOLDER="INBOX"  # INBOX

# Other settings
OUTPUT_FILE = f"malspam_emails_{FOLDER}_{datetime.timestamp(datetime.now())}.csv"
IMAP_QUERY = '(SINCE "01-Oct-2020")'

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def fetch_message_ids(imap):
    ret, data = imap.select(FOLDER)

    if ret != "OK":
        raise RuntimeError(data)
    ret, data = imap.search(None, str(IMAP_QUERY))
    if ret != "OK":
        raise RuntimeError(data)
    return data[0].split()

def get_bazaar_signature(md5_hash):
    value = None
    try:
        URL = "https://mb-api.abuse.ch/api/v1/"
        data = { 'query': 'get_info', 'hash': md5_hash }
        response = requests.post(URL, data=data)
        json_data = json.loads(response.content)
        if(isinstance(json_data, dict)):
            if(json_data['query_status'] == "ok"):
                value = json_data['data'][0]['signature']
    except:
        return None

    return value

def extract_header_data(imap, msg_id):
    ret, data = imap.fetch(msg_id, '(BODY.PEEK[HEADER.FIELDS])')
    if ret != "OK":
        raise RuntimeError(data)
    for response_part in data:
        if isinstance(response_part, tuple):
            msg = email.message_from_bytes(response_part[1])
            return msg

def read_message(imap, msg_id):
    ret, data = imap.fetch(msg_id, '(RFC822)')
    if ret != "OK":
        raise RuntimeError(data)
    return email.message_from_bytes(data[0][1])

def extract_attachments(msg):
    for part in msg.walk():
        if part.is_multipart():
            continue

        if part.get('Content-Disposition') is None:
            continue

        filename = part.get_filename(failobj="sample")
        sample = part.get_payload(decode=True)

        transfer_encoding = part.get_all('Content-Transfer-Encoding')
        if transfer_encoding and transfer_encoding[0] == 'base64':
            filename_parts = filename.split('?')
            if(len(filename_parts) > 2):
                try:
                    filename = base64.urlsafe_b64decode(filename_parts[3]).decode(filename_parts[1])
                except:
                    return

        if len(sample) == 0:
            continue
        yield filename, sample

def clean_subject(subj):
    subj_parts = subj.split('?')
    if(len(subj_parts) > 2):
        try:
            return base64.urlsafe_b64decode(subj_parts[3]).decode(subj_parts[1])
        except:
            return subj # failed
    return subj.replace("\n", "")       
        
def main():
    imap = imaplib.IMAP4_SSL(SERVER)
    print(f"Logging into mailbox as {USERNAME}.")
    imap.login(USERNAME, PASSWORD)
    print(f"Searching emails with query {bcolors.OKGREEN}{IMAP_QUERY}{bcolors.ENDC}. Please wait ... ")
    msg_ids = fetch_message_ids(imap)
    print(f"Found a total of {len(msg_ids)} emails.")
    print("Starting to analyze emails and attachments.")

    malware_entries = {}

    for msg_id in tqdm(msg_ids):
        try:
            message = read_message(imap, msg_id)
            for name, content in extract_attachments(message):
                md5_hash = hashlib.md5(content).hexdigest()
                sha256_hash = hashlib.sha256(content).hexdigest()
                malware = get_bazaar_signature(md5_hash)
                if(malware != None):
                    malware_entry = [message['date'], clean_subject(message['subject']), name, md5_hash, sha256_hash, malware]
                    malware_entries[md5_hash] = malware_entry
        except:
            continue

    if(len(malware_entries) > 0):
        print(f"Writing output to {OUTPUT_FILE}")
        f = open(OUTPUT_FILE, "w")
        f.write("\"Date\",\"Subject\",\"Attachment\",\"MD5 Hash\", \"SHA-256 Hash\", \"Malware\"\n")
        for entry in malware_entries.keys():
            f.write(f"\"{malware_entries[entry][0]}\",\"{malware_entries[entry][1]}\",\"{malware_entries[entry][2]}\",\"{malware_entries[entry][3]}\",\"{malware_entries[entry][4]}\",\"{malware_entries[entry][5]}\"\n")
        f.close()
    else:
        print(f"{bcolors.WARNING}WARNING: No malicious attachments detected. Try chaning the IMAP search query (currently set to\"{IMAP_QUERY}\" for folder \"{FOLDER}\"){bcolors.ENDC}")

if __name__ == '__main__':
    if(IMAP_QUERY == None):
        when = datetime.datetime.today()
        first = datetime.date(day=1, month=when.month, year=when.year)
        prev_month_end = first - datetime.timedelta(days=1)
        current_month_start = datetime.date(day=1, month=when.month, year=when.year)
        prev_month_start = datetime.date(day=1, month=prev_month_end.month, year=prev_month_end.year)
        IMAP_QUERY = "SINCE \"{0}\" BEFORE \"{1}\"".format(prev_month_start.strftime('%d-%b-%Y'),current_month_start.strftime('%d-%b-%Y'))

    main()
